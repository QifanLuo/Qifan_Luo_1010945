/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Restaurant.MenuItem;
import Business.Restaurant.Restaurant;
import Business.Role.CustomerRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luoqi
 */
public class CreateOrderJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem business;
    private Order order;
    private boolean isCheckOut = false;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */


    CreateOrderJPanel(JPanel userProcessContainer, UserAccount userAccount, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
      
        this.userAccount = userAccount;
        this.business = business;
        if(!isCheckOut)
        order = new Order(); 
        
        populateCombox();
        
        
    }
    
    public void populateCombox(){
        resCombox.removeAllItems();
        for(Restaurant r : business.getRestaurantDirectory().getRestaurantList()){
            resCombox.addItem(r);
        }
        populateTable();
    }
    
    private void populateTable(){
                //int rowCount = supplierTable.getRowCount();
        DefaultTableModel model = (DefaultTableModel) MenuTable.getModel();

        model.setRowCount(0);
        Restaurant r = (Restaurant)resCombox.getSelectedItem();
        
        for (MenuItem mi : r.getMenulist().getMenulist()) {
            Object row[] = new Object[3];
            row[0] = mi;
            row[1] = mi.getPrice();
            row[2] = mi.getAvailNum();
            
            model.addRow(row);
        }
    }
    
    private void refreshOrderTable(){
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();

        model.setRowCount(0);
        //Supplier supplier = supplierDirectory.searchSupplier(keyWord);
        
        
        for(OrderItem oi : order.getOrderItemList()){
        
        
            Object row[] = new Object[3];
            row[0] = oi; 
            row[1] = oi.getQuatity();
            row[2] = oi.getQuatity()*oi.getSalesPrice();
            model.addRow(row);
            }

        
        
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MenuTable = new javax.swing.JTable();
        quantitySpinner = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNewQuantity = new javax.swing.JTextField();
        modifyBtn = new javax.swing.JButton();
        checkBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        resCombox = new javax.swing.JComboBox();

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        MenuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Price", "Avail Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(MenuTable);
        if (MenuTable.getColumnModel().getColumnCount() > 0) {
            MenuTable.getColumnModel().getColumn(0).setResizable(false);
            MenuTable.getColumnModel().getColumn(1).setResizable(false);
            MenuTable.getColumnModel().getColumn(2).setResizable(false);
        }

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Number", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setResizable(false);
            orderTable.getColumnModel().getColumn(1).setResizable(false);
            orderTable.getColumnModel().getColumn(2).setResizable(false);
        }

        addBtn.setText("Add to Cart");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Quantity :");

        modifyBtn.setText("Modify Quantity");
        modifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBtnActionPerformed(evt);
            }
        });

        checkBtn.setText("Check out");
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        resCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resComboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(addBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifyBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(checkBtn)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(350, 350, 350)
                        .addComponent(resCombox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(resCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifyBtn)
                    .addComponent(checkBtn)
                    .addComponent(removeBtn))
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resComboxActionPerformed
        // TODO add your handling code here:
        populateTable();

    }//GEN-LAST:event_resComboxActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        int row = MenuTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return; 
        }
        MenuItem selectMenuItem = (MenuItem)MenuTable.getValueAt(row, 0);
        
        int fetchQty = (Integer)quantitySpinner.getValue();
        if(fetchQty<=0){
            JOptionPane.showMessageDialog(null, "Quantity can not be less than equal to zero!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return; 
        }
        
        try{
        double salesPrice = (Double)MenuTable.getValueAt(row, 1);

        
        if(fetchQty <= selectMenuItem.getAvailNum()){
            boolean alreadyPresent = false;
            for(OrderItem oi:order.getOrderItemList()){
                if(oi.getMenuItem()== selectMenuItem){
                    int oldAva = selectMenuItem.getAvailNum();
                    int newAva = oldAva-fetchQty;
                    selectMenuItem.setAvailNum(newAva);
                    oi.setQuatity(fetchQty+oi.getQuatity() );
                    alreadyPresent = true;
                    populateTable();
                    refreshOrderTable();
                    break;
                    
                }
            }
            if(!alreadyPresent){
                int oldAva = selectMenuItem.getAvailNum();
                int newAva = oldAva-fetchQty;
                selectMenuItem.setAvailNum(newAva);
                Restaurant r = (Restaurant)resCombox.getSelectedItem();
                String name = r.getName();
                order.addOrderItem(selectMenuItem, fetchQty, salesPrice, name);
                populateTable();
                refreshOrderTable();
            }
        }else{
                JOptionPane.showMessageDialog(null, "Quantity > Availability", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        
        
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalued Sales Price!", "Warning", JOptionPane.WARNING_MESSAGE);
            return; 
        }
        
        
    }//GEN-LAST:event_addBtnActionPerformed

    private void modifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBtnActionPerformed
        // TODO add your handling code here:
        
        
        int row = orderTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return; 
        }
        OrderItem oi = (OrderItem)orderTable.getValueAt(row, 0); 
        int currentAva = oi.getMenuItem().getAvailNum();
        int oldQty = oi.getQuatity();
        int newQty = Integer.parseInt(txtNewQuantity.getText());
         
        if(newQty > (currentAva+oldQty)){
            JOptionPane.showMessageDialog(null, "Quantity is more than Availabilty", "Warning", JOptionPane.WARNING_MESSAGE);
            return; 
        }else{
            if(newQty<=0){
                JOptionPane.showMessageDialog(null, "Quantity should be greater than zero ", "Warning", JOptionPane.WARNING_MESSAGE);
                return; 
            }
            oi.setQuatity(newQty);
            oi.getMenuItem().setAvailNum(currentAva+(oldQty-newQty));
            populateTable();
            refreshOrderTable();
            
        }
    }//GEN-LAST:event_modifyBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:
        
        int row = orderTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        OrderItem oi = (OrderItem)orderTable.getValueAt(row, 0);
        int oldAva = oi.getMenuItem().getAvailNum();
        int oldQty = oi.getQuatity();
        int newAva = oldQty+oldAva;
        oi.getMenuItem().setAvailNum(newAva);
        order.removeOrder(oi);
        JOptionPane.showMessageDialog(null, "orderItem removed successfully!");
        refreshOrderTable();
           populateTable(); 
    }//GEN-LAST:event_removeBtnActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        // TODO add your handling code here:
        if(order.getOrderItemList().size()>0){
           business.getMasterOrderCatalog().getOrderList().add(order);
           
           CustomerRole r = (CustomerRole) userAccount.getRole();
           r.getOrderList().add(order);
           order.setUser(userAccount);
           
           
           JOptionPane.showMessageDialog(null, "Order placed successfully!");
           order = new Order();
           refreshOrderTable();
           populateTable();
           isCheckOut = true;
           
            
        }else{
            JOptionPane.showMessageDialog(null, "No order placed", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_checkBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MenuTable;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton checkBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modifyBtn;
    private javax.swing.JTable orderTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton removeBtn;
    private javax.swing.JComboBox resCombox;
    private javax.swing.JTextField txtNewQuantity;
    // End of variables declaration//GEN-END:variables
}
